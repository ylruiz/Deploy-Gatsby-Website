{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["indexQuery","Home","data","allMdx","edges","totalCount","numPages","Math","ceil","posts","filter","edge","node","frontmatter","date","map","key","id","post","t","useTranslation","title","className","i18nKey","currentPage"],"mappings":"4FAAA,uIAuDaA,EAAU,aAkCRC,UAhFF,SAAC,GAAc,IAAD,IAAXC,KACqBC,OAA3BC,EADiB,EACjBA,MAAOC,EADU,EACVA,WAGTC,EAAWC,KAAKC,KAAKH,EADN,GAGfI,EAAQL,EACXM,QAAO,SAAAC,GAAI,QAAMA,EAAKC,KAAKC,YAAYC,QACvCC,KAAI,SAAAJ,GAAI,OAAI,kBAAC,IAAD,CAAUK,IAAKL,EAAKC,KAAKK,GAAIC,KAAMP,EAAKC,UAE/CO,EAAMC,yBAAe,CAAC,iBAAtBD,EAER,OACE,kBAAC,IAAD,CAAQE,MAAOF,EAAE,cAAe,SAC9B,0BAAMF,GAAG,OAAOK,UAAU,QACxB,wBAAIA,UAAU,cACZ,kBAAC,QAAD,CAAOC,QAAQ,cAAf,aAEF,kBAAC,IAAD,MACCd,EACD,kBAAC,IAAD,CAAiBe,YAAa,EAAGlB,SAAUA","file":"component---src-pages-index-js-9b44477d5ce660440ba3.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { Trans, useTranslation } from \"gatsby-plugin-react-i18next\"\nimport PropTypes from \"prop-types\"\nimport Layout from \"../components/Layout\"\nimport BlogCard from \"../components/BlogCard\"\nimport PaginationLinks from \"../components/PaginationLinks\"\nimport SubHeader from \"../components/SubHeader\"\n\nconst Home = ({ data }) => {\n  const { edges, totalCount } = data.allMdx\n\n  const postsPerPage = 6\n  const numPages = Math.ceil(totalCount / postsPerPage)\n\n  const posts = edges\n    .filter(edge => !!edge.node.frontmatter.date)\n    .map(edge => <BlogCard key={edge.node.id} post={edge.node} />)\n\n  const { t } = useTranslation([\"header, blog\"])\n\n  return (\n    <Layout title={t(\"header:BLOG\", \"BLOG\")}>\n      <main id=\"home\" className=\"blog\">\n        <h1 className=\"page-title\">\n          <Trans i18nKey=\"blog:title\">Articles</Trans>\n        </h1>\n        <SubHeader /> \n        {posts}\n        <PaginationLinks currentPage={1} numPages={numPages} />\n      </main>\n    </Layout>\n  )\n}\n\nHome.propTypes = {\n  data: PropTypes.shape({\n    allMdx: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport const indexQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMdx(sort: { order: DESC, fields: [frontmatter___date] }, limit: 6) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            title\n            tags\n            categories\n            desc\n            image {\n              childImageSharp {\n                fluid(maxWidth: 1200) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n      totalCount\n    }\n  }\n`\n\nexport default Home\n"],"sourceRoot":""}