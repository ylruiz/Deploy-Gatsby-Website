{"version":3,"sources":["webpack:///./src/content/templates/tags.js"],"names":["Tags","data","allMdx","edges","totalCount","numPages","Math","ceil","className","i18nKey","map","node","slug","fields","key","post","currentPage","query"],"mappings":"4FAAA,kIAuDeA,UA9CF,SAAC,GAAc,IAAD,IAAXC,KACqBC,OAA3BC,EADiB,EACjBA,MAAOC,EADU,EACVA,WAGTC,EAAWC,KAAKC,KAAKH,EADN,GAGrB,OACE,kBAAC,IAAD,KACE,0BAAMI,UAAU,QACd,wBAAIA,UAAU,cAAa,kBAAC,QAAD,CAAOC,QAAQ,cAAf,aAC3B,kBAAC,IAAD,MAECN,EAAMO,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACR,OAAO,kBAAC,IAAD,CAAUE,IAAKF,EAAMG,KAAMJ,OAGpC,kBAAC,IAAD,CAAiBK,YAAa,EAAGX,SAAUA,OA+B5C,IAAMY,EAAK","file":"component---src-content-templates-tags-js-1b4d8efba39001ba918d.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { graphql } from \"gatsby\"\nimport {Trans} from 'gatsby-plugin-react-i18next';\nimport Layout from \"../../components/Layout\"\nimport BlogCard from \"../../components/BlogCard\"\nimport PaginationLinks from \"../../components/PaginationLinks\"\nimport SubHeader from \"../../components/SubHeader\"\n\nconst Tags = ({ data }) => {\n  const { edges, totalCount } = data.allMdx\n\n  const postsPerPage = 6\n  const numPages = Math.ceil(totalCount / postsPerPage)\n\n  return (\n    <Layout>\n      <main className=\"blog\">\n        <h1 className=\"page-title\"><Trans i18nKey=\"blog:title\">Articles</Trans></h1>\n        <SubHeader />\n\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          return <BlogCard key={slug} post={node} />\n        })}\n\n        <PaginationLinks currentPage={1} numPages={numPages} />\n      </main>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMdx: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const query = graphql`\n  query($tag: String) {\n    allMdx(\n      limit: 6\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            title\n            tags\n            categories\n            desc\n            image {\n              childImageSharp {\n                fluid(maxWidth: 1200) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          fields {\n            slug\n          }\n        }\n      }\n      totalCount\n    }\n  }\n`\n"],"sourceRoot":""}